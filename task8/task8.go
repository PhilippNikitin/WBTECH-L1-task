package main

import "fmt"

// Инициализируем функцию setBit

// Параметры

// num - число, в котором необходимо изменить значение одного из битов
// pos - номер позиции бита, val - значение 0 или 1, которое нужно установить
func setBit(num int64, pos, val int) int64 {
	if pos < 0 || pos >= 64 {
		// если pos находится вне возможного диапазона, возвращаем исходное число
		fmt.Println("Недопустимое значение позиции. Доступный интервал [0, 64]")
		return num
	}

	// Создаем маску, которая будет использоваться для изменения бита в позиции pos.
	// Сдвигаем 1 влево на pos позиций, чтобы получить маску с 1 в нужной позиции и 0 во всех остальных
	mask := int64(1) << uint(pos)

	if val == 0 {
		return num & ^mask // Обнуляем бит в позиции pos - инвертируем маску и выполняем операцию побитового И
	}
	return num | mask // Устанавливаем 1 для бита в позиции pos при помощи побитовой операции ИЛИ
}

func main() {
	var (
		num int64 // Объявляем переменную типа int64 - для числа
		pos int   // Объявляем переменную, для сохранения позиции, в которой нужно изменить бит
		val int   // Объявляем переменную для сохранения значения - 1 или 0, в которое нужно установить бит
	)
	fmt.Println("Введите число: ")
	fmt.Scanln(&num)
	fmt.Println("Введите позицию, в которой необходимо изменить бит (доступный интервал [0, 64]): ")
	fmt.Scanln(&pos)
	fmt.Println("Введите значение, которое необходимо установить для бита в данной позиции (1/0): ")
	fmt.Scanln(&val)

	fmt.Printf("Исходное число в десятичном формате: %d\n", num)
	fmt.Printf("Исходное число в двоичном формате: %b\n", num)

	// Модифицируем число в соответствии с инструкциями
	new_num := setBit(num, pos, val)
	fmt.Printf("Заданное число с %d-м битом, установленным в %d (десятичный формат): %d\n", pos, val, new_num)
	fmt.Printf("Заданное число с %d-м битом, установленным в %d (десятичный формат): %b\n", pos, val, new_num)
}
